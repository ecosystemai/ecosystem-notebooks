from prediction.endpoints import algorithm_client_pulse as endpoints
from prediction import request_utils

def get_timeline(auth, user, limit):
# Get Timeline:
#   auth: Authentication token generated by jwt_access.Authenticate()
#   user: User name (string)
#   limit: Output limit (int)
    ep = endpoints.GET_TIMELINE
    param_dict = {
        "user": user, 
        "limit": limit
    }
    resp = request_utils.create(auth, ep, params=param_dict)
    meta = resp.json()
    return meta

def process_basket(auth, dbcust, colcust, searchcust, custfield, dbitem, colitem, itemfield, supportcount):
# Process Basket:
#   auth: Authentication token generated by jwt_access.Authenticate()
#   dbcust: (str)
#   colcust: (str)
#   searchcust: (str)
#   custfield: (str)
#   dbitem: (str)
#   colitem: (str)
#   itemfield: (str)
#   supportcount: (int)
    ep = endpoints.PROCESS_BASKET
    param_dict = {
        "dbCust": dbcust, 
        "colCust": colcust,
        "searchCust": searchcust,
        "custField": custfield,
        "dbItem": dbitem,
        "colItem": colitem,
        "itemField": itemfield,
        "supportCount": supportcount
    }
    resp = request_utils.create(auth, ep, params=param_dict)
    meta = resp.json()
    return meta

def process_directed_graph(auth, graphMeta, graphParam):
# Analyze graph from data using graph meta data and analysis parameters. 
# Meta data format example: {"vertex":[0,1],"edges":[{"from":0,"to":1}],"from":0,"source":"/data/data.csv","dotfile":"/data/data.dot","to":1} Analysis parameter example: {"destination":"Bakeries","source":"12345678"} 
# Columns in file start at 0 and is sequenced.
#   auth: Authentication token generated by jwt_access.Authenticate()
#   graphMeta: (str)
#   graphParam: (str)
    ep = endpoints.PROCESS_BASKET
    param_dict = {
        "graphMeta": graphMeta, 
        "graphParam": graphParam
    }
    resp = request_utils.create(auth, ep, params=param_dict)
    meta = resp.json()
    return meta