from prediction.endpoints import algorithm_client_pulse as endpoints
from prediction import request_utils

def get_timeline(auth, user, limit):
# Get Timeline:
#   auth: Authentication token generated by jwt_access.Authenticate()
#   user: User name (string)
#   limit: Output limit (int)
	ep = endpoints.GET_TIMELINE
	param_dict = {
		"user": user, 
		"limit": limit
	}
	resp = request_utils.create(auth, ep, params=param_dict)
	meta = resp.json()
	return meta

def process_basket(auth, dbcust, colcust, searchcust, custfield, dbitem, colitem, itemfield, supportcount):
# Process Basket:
#   auth: Authentication token generated by jwt_access.Authenticate()
#   dbcust: (str)
#   colcust: (str)
#   searchcust: (str)
#   custfield: (str)
#   dbitem: (str)
#   colitem: (str)
#   itemfield: (str)
#   supportcount: (int)
	ep = endpoints.PROCESS_BASKET
	param_dict = {
		"dbCust": dbcust, 
		"colCust": colcust,
		"searchCust": searchcust,
		"custField": custfield,
		"dbItem": dbitem,
		"colItem": colitem,
		"itemField": itemfield,
		"supportCount": supportcount
	}
	resp = request_utils.create(auth, ep, params=param_dict)
	meta = resp.json()
	return meta

def process_directed_graph(auth, graphMeta, graphParam):
# Analyze graph from data using graph meta data and analysis parameters. 
# Meta data format example: {"vertex":[0,1],"edges":[{"from":0,"to":1}],"from":0,"source":"/data/data.csv","dotfile":"/data/data.dot","to":1} Analysis parameter example: {"destination":"Bakeries","source":"12345678"} 
# Columns in file start at 0 and is sequenced.
#   auth: Authentication token generated by jwt_access.Authenticate()
#   graphMeta: (str)
#   graphParam: (str)
	ep = endpoints.PROCESS_BASKET
	param_dict = {
		"graphMeta": graphMeta, 
		"graphParam": graphParam
	}
	resp = request_utils.create(auth, ep, params=param_dict)
	meta = resp.json()
	return meta


def generate_forecast(auth, attribute, collection, collectionOut, database, dateattribute, find, historicsteps, steps):
	ep = endpoints.GENERATE_FORECAST
	param_dict = {
		"attribute": attribute,
		"collection": collection,
		"collectionOut": collectionOut,
		"database": database,
		"dateattribute": dateattribute,
		"find": find,
		"historicsteps": historicsteps,
		"steps": steps
	}
	resp = request_utils.create(auth, ep, params=param_dict)
	meta = resp.json()
	return meta

def process_apriori(auth, colItem, collection, collectionOut, custField, database, dbItem, find, itemField, supportCount):
	ep = endpoints.PROCESS_APRIORI
	param_dict = {
		"colItem": colItem,
		"collection": collection,
		"collectionOut": collectionOut,
		"custField": custField,
		"database": database,
		"dbItem": dbItem,
		"find": find,
		"itemField": itemField,
		"supportCount": supportCount
	}
	resp = request_utils.create(auth, ep, params=param_dict)
	meta = resp.json()
	return meta

def process_ecogenetic_network(auth, collection, collectionOut, database, find, graphMeta, graphParam):
	ep = endpoints.PROCESS_ECOGENETIC_NETWORK
	param_dict = {
		"collection": collection,
		"collectionOut": collectionOut,
		"database": database,
		"find": find,
		"graphMeta": graphMeta,
		"graphParam": graphParam
	}
	resp = request_utils.create(auth, ep, params=param_dict)
	meta = resp.json()
	return meta
